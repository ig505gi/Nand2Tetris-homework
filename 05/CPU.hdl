// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // ALU
    Mux16(a=outA, b=inM, sel=instruction[12], out=outY);
    ALU(x=outD, y=outY, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outALU, zr=outZero, ng=outNegative);

    // A register
    // A命令 instruction[15] = 0，一定写A ; C命令 instruction[5] == 1时，写A
    Not(in=instruction[15], out=instructionA);
    Or(a=instructionA, b=instruction[5], out=controlA);
    Mux16(a=outALU, b=instruction, sel=instructionA, out=inA);
    ARegister(in=inA, load=controlA, out=outA);

    // D register
    And(a=instruction[15], b=instruction[4], out=controlD);
    DRegister(in=outALU, load=controlD, out=outD);

    // PC
    // A命令 load一定为0；C命令，要看结果和0比
    Xor(a=outZero, b=outNegative, out=outNotPositive);
    Not(in=outNotPositive, out=outPositive);
    And(a=instruction[0], b=outPositive, out=jump0);  // >0
    And(a=instruction[1], b=outZero, out=jump1);  // =0
    And(a=instruction[2], b=outNegative, out=jump2);  // <0
    Or(a=jump0, b=jump1, out=jump01);
    Or(a=jump01, b=jump2, out=jump);
    And(a=instruction[15], b=jump, out=loadPC);

    // out
    PC(in=outA, load=loadPC, inc=true, reset=reset, out[0..14]=pc);
    Or16(a=outALU, b=false, out=outM);
    Or16(a=outA, b=false, out[0..14]=addressM);
    // 必须是C命令，并且控制位instruction[3]为1
    And(a=instruction[15], b=instruction[3], out=writeM);
}